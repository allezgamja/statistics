qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*500))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*1000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*3000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
install.packages("proxy")
library(proxy)
# proxy함수는 유사도분석
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
cps
dtm <- DocumentTermMatrix(cps)
dtm
as.matrix(dtm)
inspect(dtm)
com <- m %*% t(m)
com
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
# 피타고라스
install.packages("lsa")
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
install.packages("SnowballC") # 어간추출을 위한 패키지
install.packages("wordcloud") # word-cloud generator
# Load
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
stopwords("english"
stopwords("english")
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
text <- readLines(filePath)
# VectorSource () 함수는 문자형 벡터 모음을 만듭니다.
docs <- Corpus(VectorSource(text))
# 텍스트의 특수 문자 등을 대체하기 위해 tm_map () 함수를 사용하여 변환이 수행됩니다.
# “/”,“@”및“|”을 공백으로 바꿉니다.
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
stopwords("english")
듀크 <- c(사과, 포도, 망고)
듀크 <- c("사과 포도 망고")
듀크
둘리 <- c("포도 자몽 자두")
또치 <- c("복숭아 사과 포도")
도우너 <- c("오렌지 바나나 복숭아")
길동 <- c("포도 바나나 망고")
희동 <- c("포도 귤 오렌지")
fruit <- c(듀크, 둘리, 또치, 도우너, 길동, 희동)
fruit
cps <- VCorpus(VectorSource(fruit))
cps
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps)
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
tdm
m <- as.matrix(tdm)
m
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
rowSums(m) # 어떤 음식을 가장 많이 먹었는지
m
rowSums(m)
max(rowSums(m))
sort(rowSums(m))
sort(rowSums(m), decreasing=T)
library(qgraph)
# 문제 1
colSums(m) # 각 학생이 얼마나 먹었는지
# 문제 1
com <- m %*% t(m)  # 행렬곱. 원래의 매트릭스에 행과 열을 바꾼 값을 행렬값 연산.
# t()는 행과 열을 바꿔준다.
com
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
source('C:/Rstudy/실습제출답안/tm1.R', encoding = 'UTF-8', echo=TRUE)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동동")
rowSums(m)
sort(rowSums(m), decreasing=T)
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
as.matrix(dtm)
as.matrix(dtm)
m <- as.matrix(dtm)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동")
m
cps <- Corpus(VectorSource(fruit))
fruit
cps <- VCorpus(VectorSource(fruit))
cps
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
tdm
as.matrix(tdm)
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
tdm
as.matrix(tdm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
cosine(com)
sort(cosine(com))
cosine(com)
str(cosine(com))
max(cosine(com))
unlist(cosine(com))
unlist(cosine(com)) - cosine(com)==1
unlist(cosine(com)) - cosine(com)
cosine(com)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cosine(com)
cosine(com)==1 <- NA
cos <- cosine(com)
cos <- cos[!(cos==0)]
cos
cos <- cos[!(cos==1)]
cos
com
cos <- cosine(com)
cos
cos==1
cos[!(cos==1)]
cos==1 <- NA
cos==1 <- "NA"
cos
cos
gsub("1", "***", cos)
cos <- gsub("1", "***", cos)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos
cos <- as.table(cosine(com))
cos
cos <- cos[!(cos==1)]
cos
cos <- as.table(cosine(com))
cos
cos <- cosine(com)
cos
cos <- as.list(cosine(com))
cos
cos <- cosine(com)
cos
install.pacakes("reshape2")
install.packages("reshape2")
library(reshape2)
head(french_fries)
mean(french_fries$potato)
french_fries$potato
mean(french_fries$potato)
french_fries %>% select(potato)
library(dplyr)
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato)
french_fries %>% select(potato) %>% summarise(mean <- mean(potato))
french_fries %>% select(potato) %>% summarise(mean())
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato))
str(french_fries)
french_fries %>% select(potato) %>% summarize(평균=mean(potato))
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% mean()
mean(french_fries$potato, na.rm=T)
french_fries %>% select(potato) %>% summarise(평균= mean(), na.rm=T)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
library(dplyr)
m %>% group_by(potato) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
v
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
# reshape2: 데이터셋의 구조를 바꿔준다.
library(reshape2)
head(french_fries)
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
r <- dcast(m, time+treatment+subject + rep ~ ...)
# id 해당되는 이름을 엮는다. time~rep까지 사용하고 나머지 값을 갖다붙인다.
# 이때는 variable에 있는 애들이 변수값이 된다.
# decast; metl된 것을 다시 원래대로 되돌리겠다.
head(r)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
?next
xdata <- c(1196, 1340, 1232, 1184, 1295,
1247, 1201, 1182, 1192, 1287,
1159, 1160, 1243, 1264, 1276)
t.text(xdata.mu=1220)
install("t.text")
install.packages("t.text")
# 단일검정
setwd()
# 단일검정
getwd()
setwd()
# 단일검정
getwd()
setwd('c:/Rstudy/data/Part-III')
# 단일검정
getwd()
# \는 두개, /는 한개
data <- read.csv("one_sample.csv", header=TRUE)
data
head(data)
x<- data$survey
x
str(x)
x
class(x)
summary(x)
table(x)
length(x)
summary(x)
summary(as.factor(x))
table(x)  # 각 범주별 개수 체크
summary(data)
data$survey <- as.factor(data$survey)
data$survey
summary(data)
install.packages("prettyR")
library(prettyR)
freq(x)
#단측검정
?binom.test
#단측검정
binom.test(x(136,14), p = 0.8, alternative = "greater") # 136은 80%보다 크다
binom.test(c(136,14), p = 0.8) # 136은 150의 80%일 것이다.
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "greater") # 136은 80%보다 크다
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "greater") # 136은 80%보다 크다
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "greater") # 136은 80%보다 크다
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "greater", conf.level = 0.95) # 136은 80%보다 크다
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "greater", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "greater", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "less", conf.level = 0.95) # 136은 80%보다 크다.
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "greater", conf.level = 0.95)
binom.test(c(14,136), p = 0.2, alternative = "less", conf.level = 0.95)
#단측검정
binom.test(c(136,14), p = 0.8, alternative = "greater", conf.level = 0.95) # 136은 80%보다 크다.
binom.test(c(136,14), p = 0.8) # 136은 150의 80%일 것이다.
sqrt(25)
library(t.text)
install.packages("t.text")
num <- sample(1:10,1)
for(num in 1:10){
cat(num, ":", switch(EXPR=num,"A","B","C","D"),"\n")
}
num <- sample(1:10,1)
num
num <- sample(1:10,1)
num
for(num in 1:10){
cat(num, ":", switch(EXPR=num,"A","B","C","D"),"\n")
}
print(data)
for(data in month.name)
print(data)
sum <- 0
for(i in 5:15){
if(i%%10==0){
break;
}
sum <- sum + i
print(paste(i,":",sum))
}
sum = 0
for (i in 5:15){
if(i==10){
break
}
sum = sum + i
print(i,":", sum)
}
print(paste(i,":", sum))
sum = 0
for (i in 5:15){
if(i==10){
break
}
sum = sum + i
print(paste(i,":", sum))
}
sum = 0
for (i in 5:15){
if(i==10){
break
}
sum = sum + i
cat(i,":", sum)
}
sum = 0
for (i in 5:15){
if(i==10){
break
}
sum = sum + i
cat(i,":", sum,\n)
}
cat(i,":", sum, \n)
sum <-0
for(i in 5:15){
if(i%%10==0){
next;  #continue
}
sum <- sum + i
print(paste(i,":",sum))
}
sumNumber <- 0
while(sumNumber <= 20) {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
}
sumNumber <- 0
while(sumNumber <= 20) {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
}
repeat {
cat("ㅋㅋㅋ\n")
}
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
sumNumber <- 0
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
sumNumber <- 0
repeat {
i <- sample(1:5, 1)
sumNumber <-sumNumber+i;
cat(sumNumber,"\n")
if(sumNumber > 20)
break;
}
func1()
func1 <- function() {
xx <- 10   # 지역변수
yy <- 20
return(xx*yy)
}
func1()
func1 <- function() {
xx <- 10   # 지역변수
yy <- 20
return(xx*yy)
}
func1()
result <- func1()
result
xx  # 오류발생
func2 <- function(x,y){
return(sum(x,y))
}
func2(5,6)
func3 <- function(x,y) {
#x3 <- x+1
#y3 <- y+1
x4 <- func2(x+1, y+1)  # 값(식) : 변수, 리터럴, 연산식, 호출식
return(x4)
}
func3(9, 19)  # 30
func4 <- function(x=100, y=200, z) {
return(x+y+z)
}
func4()
func4(10,20,30)
func4(x=1,y=2,z=3)
func4(y=11,z=22,x=33)
func4(z=1000)
