df$w
sapply(df$w, myf)
sapply(df$w, myf, F)
rr1 <- sapply(df$w, myf, wt=F)
rr1
rr1 <- sapply(df$w, myf, wt=F)
df <- data.frame(w=weight, h=height)
apply(df, 1, sum, na.rm=TRUE) # 네번째 이후의 argument들은 필수는아니다.
# 가로 단위로 계산
apply(df, 2, sum, na.rm=TRUE) # 전체 대상자들의 키, 몸무게의 합
?apply
str(rr1)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(stringr)
useSejongDic()
install.packages("tm")   # textmining
library(tm)
lunch <- c("커피 파스타 치킨 샐러드 아이스크림",
"커피 우동 소고기김밥 귤",
"참치김밥 커피 오뎅",
"샐러드 피자 파스타 콜라",
"티라무슈 햄버거 콜라",
"파스타 샐러드 커피"
)
cps <- VCorpus(VectorSource(lunch))
cps
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps)
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
cps <- VCorpus(VectorSource(lunch))
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths = c(1, Inf)))
# Inf
# 문자의 개수 제한이 없도록
tdm
(m <- as.matrix(tdm))
(m <- as.matrix(tdm))
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
rowSums(m)
colSums(m)
m
t(m)
com <- m %*% t(m)  # 행렬곱
com
# t()는 행과 열을 바꿔준다.
com
com <- m %*% t(m)  # 행렬곱. 원래의 매트릭스에 행과 열을 바꾼 값을 행렬값 연산.
# t()는 행과 열을 바꿔준다.
com
install.packages("qgraph")
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*500))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*1000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*3000))
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
install.packages("proxy")
library(proxy)
# proxy함수는 유사도분석
dd <- NULL
d1 <- c("aaa bbb ccc")
d2 <- c("aaa bbb ddd")
d3 <- c("aaa bbb ccc")
d4 <- c("xxx yyy zzz")
dd <- c(d1, d2, d3, d4)
cps <- Corpus(VectorSource(dd))
cps
dtm <- DocumentTermMatrix(cps)
dtm
as.matrix(dtm)
inspect(dtm)
com <- m %*% t(m)
com
cps <- Corpus(VectorSource(dd))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
# 피타고라스
install.packages("lsa")
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
library(lsa)
cosine(com)
# Install
install.packages("tm")  # 텍스트 마이닝을 위한 패키지
install.packages("SnowballC") # 어간추출을 위한 패키지
install.packages("wordcloud") # word-cloud generator
# Load
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
stopwords("english"
stopwords("english")
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
text <- readLines(filePath)
# VectorSource () 함수는 문자형 벡터 모음을 만듭니다.
docs <- Corpus(VectorSource(text))
# 텍스트의 특수 문자 등을 대체하기 위해 tm_map () 함수를 사용하여 변환이 수행됩니다.
# “/”,“@”및“|”을 공백으로 바꿉니다.
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
stopwords("english")
듀크 <- c(사과, 포도, 망고)
듀크 <- c("사과 포도 망고")
듀크
둘리 <- c("포도 자몽 자두")
또치 <- c("복숭아 사과 포도")
도우너 <- c("오렌지 바나나 복숭아")
길동 <- c("포도 바나나 망고")
희동 <- c("포도 귤 오렌지")
fruit <- c(듀크, 둘리, 또치, 도우너, 길동, 희동)
fruit
cps <- VCorpus(VectorSource(fruit))
cps
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps)
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
# Vector개체를 그냥 쓸 수 없어서 VectorSource를 이용해서 또다른 데이터 구조로 만듦
# 벡터가 가진 원소 개수가 6개 -> documents: 6
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
# TDM, DTM(DocumentTermMatrix) : 누가 괄호에 오느냐가 관건
# TDM은 괄호가 단어, 세로가 도큐먼트.  / DTM은 반대. 도큐먼트가 우선일 때
# 지금은 어떤 음식을 먹었는지 단어가 중요하니 TDM
tdm
# 행이 단어(7행), 열이 도큐먼트(6열)
# 11개만 데이터값이 들어가 있고, 31개는 비어있다.
# 제일 긴 단어길이; 5
# Sparsity?
as.matrix(tdm)
tdm
m <- as.matrix(tdm)
m
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
colnames(m) <- c("doc1", "doc2", "doc3", "doc4", "doc5", "doc6")
rowSums(m) # 어떤 음식을 가장 많이 먹었는지
m
rowSums(m)
max(rowSums(m))
sort(rowSums(m))
sort(rowSums(m), decreasing=T)
library(qgraph)
# 문제 1
colSums(m) # 각 학생이 얼마나 먹었는지
# 문제 1
com <- m %*% t(m)  # 행렬곱. 원래의 매트릭스에 행과 열을 바꾼 값을 행렬값 연산.
# t()는 행과 열을 바꿔준다.
com
library(qgraph)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
source('C:/Rstudy/실습제출답안/tm1.R', encoding = 'UTF-8', echo=TRUE)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동동")
rowSums(m)
sort(rowSums(m), decreasing=T)
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
as.matrix(dtm)
inspect(dtm)
m <- as.matrix(dtm)
m
as.matrix(dtm)
as.matrix(dtm)
m <- as.matrix(dtm)
m
colnames(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동")
m
cps <- Corpus(VectorSource(fruit))
fruit
cps <- VCorpus(VectorSource(fruit))
cps
tdm <- TermDocumentMatrix(cps,
control=list(wordLengths=c(1,Inf)))
tdm
as.matrix(tdm)
cps <- Corpus(VectorSource(fruit))
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps <- Corpus(VectorSource(fruit))
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
cps
dtm <- DocumentTermMatrix(cps) # 가로가 doc 세로가 term
dtm
tdm
as.matrix(tdm)
com <- m %*% t(m)
com
dist(com, method = "cosine")
# dist: distance
# cosine 각도
dist(com, method = "Euclidean")
cosine(com)
sort(cosine(com))
cosine(com)
str(cosine(com))
max(cosine(com))
unlist(cosine(com))
unlist(cosine(com)) - cosine(com)==1
unlist(cosine(com)) - cosine(com)
cosine(com)
qgraph(com, labels=rownames(com), diag=F,
layout='spring',  edge.color='blue',
vsize=log(diag(com)*800))
cosine(com)
cosine(com)==1 <- NA
cos <- cosine(com)
cos <- cos[!(cos==0)]
cos
cos <- cos[!(cos==1)]
cos
com
cos <- cosine(com)
cos
cos==1
cos[!(cos==1)]
cos==1 <- NA
cos==1 <- "NA"
cos
cos
gsub("1", "***", cos)
cos <- gsub("1", "***", cos)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos <- gsub("1", "*", cos)
cos
cos <- cosine(com)
cos
cos <- as.table(cosine(com))
cos
cos <- cos[!(cos==1)]
cos
cos <- as.table(cosine(com))
cos
cos <- cosine(com)
cos
cos <- as.list(cosine(com))
cos
cos <- cosine(com)
cos
install.pacakes("reshape2")
install.packages("reshape2")
library(reshape2)
head(french_fries)
mean(french_fries$potato)
french_fries$potato
mean(french_fries$potato)
french_fries %>% select(potato)
library(dplyr)
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato)
french_fries %>% select(potato) %>% summarise(mean <- mean(potato))
french_fries %>% select(potato) %>% summarise(mean())
french_fries %>% select(potato)
french_fries %>% select(potato) %>% summarise(mean = mean())
french_fries %>% select(potato) %>% summarise(mean = mean(potato))
str(french_fries)
french_fries %>% select(potato) %>% summarize(평균=mean(potato))
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(), na.rm=T)
french_fries %>% select(potato) %>% summarize(평균=mean(potato), na.rm=T)
french_fries %>% select(potato) %>% mean()
mean(french_fries$potato, na.rm=T)
french_fries %>% select(potato) %>% summarise(평균= mean(), na.rm=T)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
library(dplyr)
m %>% group_by(potato) %>% summarize(평균=mean(value, na.rm=T))
head(french_fries)
v
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
# reshape2: 데이터셋의 구조를 바꿔준다.
library(reshape2)
head(french_fries)
library(dplyr)
m %>% group_by(variable) %>% summarize(평균=mean(value, na.rm=T))
m2 <- melt(french_fries, id.vars=1:4, na.rm=T)
# 데이터열의 앞에서부터 네번째까지는 안바꾸겠다.
dim(m2)
dim(m)
m2 %>% group_by(variable) %>% summarize(평균=mean(value))
r <- dcast(m, time+treatment+subject + rep ~ ...)
# id 해당되는 이름을 엮는다. time~rep까지 사용하고 나머지 값을 갖다붙인다.
# 이때는 variable에 있는 애들이 변수값이 된다.
# decast; metl된 것을 다시 원래대로 되돌리겠다.
head(r)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
?next
setwd('c:/Statistics')
m <- lm(dist~speed, data=cars)
m
summary(m)
# summary로 보면 상세정보를 볼 수 있다. residual의 4분위수 확인가능
# coefficients의 estimate가 제일 중요. t검정을 이용해서 값이 우효한지 본다.
# 각각의 계수는 0이다라는 검정이 받아들여질지 말지 결정
유효하다!
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(2,2), margin=c(1,1,1,1))
# summary로 보면 상세정보를 볼 수 있다. residual의 4분위수 확인가능
# coefficients의 estimate가 제일 중요. t검정을 이용해서 값이 우효한지 본다.
# 각각의 계수는 0이다라는 검정이 받아들여질지 말지 결정
유효하다!
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(2,2), mar=c(1,1,1,1))
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
# summary로 보면 상세정보를 볼 수 있다. residual의 4분위수 확인가능
# coefficients의 estimate가 제일 중요. t검정을 이용해서 값이 우효한지 본다.
# 각각의 계수는 0이다라는 검정이 받아들여질지 말지 결정
유효하다!
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(2,2), mar=c(2,2,2,2))
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
# summary로 보면 상세정보를 볼 수 있다. residual의 4분위수 확인가능
# coefficients의 estimate가 제일 중요. t검정을 이용해서 값이 우효한지 본다.
# 각각의 계수는 0이다라는 검정이 받아들여질지 말지 결정
유효하다!
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(1,1), mar=c(2,2,2,2))
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(1,1), mar=c(2,2,2,2))
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
# adjusted R-squared: 변량이 많을 때는 어떤 게 영향을 끼치는지 모른다...
# 변량이 많을수록 위의 값이 커지므로 계수
# 변량이 많을 때는 adjusted R-suqare로 평가
#변량이 하나일 때는 multiple r-squared로 평가
#결정계수가 65%...설명력이 꽤 된다는 뜻.
par(mfrow=c(1,1), mar=c(2,2,2,2))
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
# 다음 그래프 보려면 ctrl+enter
# 다음 그래프 보려면 ctrl+enter
# 다음 그래프 보려면 ctrl+enter
# 다음 그래프 보려면 ctrl+enter
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
plot(m)
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
#화면을 2행2열로 잡고 마진을 준다.
plot(m)
residuals vs leverage: x축이 leverage(영향력), y축이 표준화된 잔차--->잔차에 따르는 영향력
#cook의 공식 나왔을 때 평균에 가깝게 나오는 애들은 영향력이 없다. 회귀식으로 설명가능
#뒤로 갈 수록 나오는 개별데이터들은 오차가 큰 애들. 정규분포(0.5빨간선) 범주 안에 들어오면 약간의 차이가 있어도 괜찮다.
#x값은 모두 1~10 사이의 값. 회귀식에서 나오는 개별치들의 잔차가 정규분포 범위 안으로 들어오는지 보기. 버릴 것 버리기 위해.
#0에 가갑게 나오는 값이 많을 수록 회귀식으로 잘 설명된다.
install.packages("lmtest")
library(lmtest)
dwtest(m)
iris
data(iris)
# y가 범주형이어ㅑ 하고, 2가지중 하나여야 한다.
d <- subset(iris, Species=='virginica' | Species=='versicolor')
d
str(d)
?glm
m <- glm(Species~.,data=d,family='binomial')
m
# 만약 Species가 Factor형이 아닐 경우 Factor형으로 변환시켜서 적용해야 수치형으로 인식 안한다.
#glm: 로지스틱회귀분석
# lm일 때는 y에 수치형 데이터가 들어가야한다.
# glm은 분류형데이터로 y를 채운다.
summary(m)
# 만약 Species가 Factor형이 아닐 경우 Factor형으로 변환시켜서 적용해야 수치형으로 인식 안한다.
#glm: 로지스틱회귀분석
# lm일 때는 y에 수치형 데이터가 들어가야한다.
# glm은 분류형데이터로 y를 채운다.
m
# 최적의 w와 b값을 리턴해준다.
fitted(m)
# 최적의 w와 b값을 리턴해준다.
fitted(m)[c(1:5,51;55)] #적합된 모델데이터 정보 확인가능. 예측모델.
# 최적의 w와 b값을 리턴해준다.
fitted(m)[c(1:5,51:55)] #적합된 모델데이터 정보 확인가능. 예측모델.
is_correct <- ifelse(f>.5, 1, 0) == as.numeric(d$Species)-1
is_correct <- ifelse(f>.5, 1, 0) == as.numeric(d$Species)-1
# 최적의 w와 b값을 리턴해준다.
f <- fitted(m)[c(1:5,51:55)] #적합된 모델데이터 정보 확인가능. 예측모델.
is_correct <- ifelse(f>.5, 1, 0) == as.numeric(d$Species)-1
is_correct
f<-fitted(m)
f<-fitted(m)
is_correct <- ifelse(f>.5, 1, 0) == as.numeric(d$Species)-1
is_correct
ifelse(f>.5, 1, 0)
#여기서 y=1은 무엇을 의미?
is_correct <- ifelse(f>.5, 1, 0) == as.numeric(d$Species)-1
# virgicolor가 2, virginica가 3
# 조건을 만족하면 1, 아니면 0
head(is_correct)
sum(is_correct) #1을 기준으로 sum
#여기서 y=1은 무엇을 의미?
is_correct <- (ifelse(f>.5, 1, 0)) == (as.numeric(d$Species)-2)
sum(is_correct) #1을 기준으로 sum
as.numeric(d$Species)
# virgicolor가 2, virginica가 3
# 조건을 만족하면 1, 아니면 0
head(is_correct)
#여기서 y=1은 무엇을 의미?
is_correct <- (ifelse(f>.5, 1, 0)) == (as.numeric(d$Species)-2)
# virgicolor가 2, virginica가 3
# 조건을 만족하면 1, 아니면 0
head(is_correct)
f
is_correct
sum(is_correct) #1을 기준으로 sum
is_correct <- (ifelse(f>.5, 1, 0)) == (as.numeric(d$Species)-2)
is_correct
#여기서 P(Y=1)은 무엇을 의미? virginica가 될 확률
fm <- ifelse(f>.5)
#여기서 P(Y=1)은 무엇을 의미? virginica가 될 확률
fm <- ifelse(f>.5, 1, 0)
head(fm)
is_correct <- (ifelse(f>.5, 1, 0)) == (as.numeric(d$Species)-2)
is_correct
# virgicolor가 0, virginica가 1 (원래는 2,3)
# 조건을 만족하면 1, 아니면 0
head(is_correct)
sum(is_correct) #1을 기준으로 sum
